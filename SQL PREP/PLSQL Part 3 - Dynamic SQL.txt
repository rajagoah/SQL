What is bind variable?
Variables that act as parameters are called Bind variables.

Substitution vs binding
Substitution --> When we have a SQL statement with a substitution variable represented with an '&', the interface being used to parse through the statement reads this substitution variable and prompts for the user to enter a suitable value BEFORE executing it.

Binding --> When we have SQL statement with a binding variable represented with a ':', the interface being used parses it and implicitly recognises that this statement has a binding variable and it will automatically apply the value being supplied to the binding variable through the arguments to the function.

SUBSTITUTION SYNTAX:

	CREATE OR REPLACE FUNCTION MY_FUNC 
		RETURN VARCHAR2
		IS
		D_NAME VARCHAR2(100);	
	BEGIN
		SELECT DEPT_NAME 
		INTO D_NAME 
		FROM DEPARTMENT
		WHERE DEPT_NO = &DEPT_NO;
		
		RETURN D_NAME;
	END;

NOTE:
Here the &DEPT_NO is the substitution variable. When the interface parses this SQL statement it reads this substitution variable and then prompts the user to enter the value of the department number.

BINDING SYNTAX:
	CREATE OR REPLACE FUNCTION MY_FUNC(P_D_NO NUMBER)
		RETURN VARCHAR2
		IS
		V_D_NAME VARCHAR2(100);
		V_D_SQL  VARCHAR2(10000);
	BEGIN
		V_D_SQL = 'SELECT DEPT_NAME FROM DEPARTMENT WHERE DEPT_NO = :1';
		EXECUTE IMMEDIATE V_D_SQL INTO V_D_NAME USING P_D_NO; 
		RETURN D_NAME;
	END;

Attempt 1 --> the Amazon interview question
-------
QUESTION 2
WRITE A SQL WHICH WILL DISPLAY ONLY THOSE RECORDS THAT HAS C3=2. IF THERE IS NO C3=2 IT WILL DISPLAY THE ENTIRE DATASET
C1 C2 C3
1  2  2
9  3  3
8  1  4

ANSWER:

CREATE TABLE TB(
COL1 CHAR(1)
, COL2 CHAR(1)
, COL3 CHAR(1));

INSERT INTO TB 
VALUES ('1','2','2');
INSERT INTO TB 
VALUES ('9','3','3');
INSERT INTO TB 
VALUES ('8','1','4');

CREATE OR REPLACE FUNCTION TEST_FUNC (P_COL3 IN CHAR) 
    RETURN VARCHAR2
    IS
    V_COL3 VARCHAR2(1);
    V_SQL VARCHAR2(10000);
BEGIN
    V_SQL := 'select col3 from tb where col3 = :1';
    EXECUTE IMMEDIATE V_SQL INTO V_COL3 USING P_COL3;
    RETURN V_COL3;
END;

Read the following:
https://blogs.oracle.com/oraclemagazine/using-dynamic-sql-for-multirow-queries
https://community.oracle.com/docs/DOC-915518
https://docs.oracle.com/cd/E11882_01/appdev.112/e25519/dynamic.htm#LNPLS01115
https://blogs.oracle.com/oraclemagazine/controlling-the-flow-of-execution