
/*DEPARTMENT TABLE  --> DEPARTMENT_ID / NAME / LOCATION 
  EMPLOYEE TABLE    --> DEPARTMENT_ID / SALARY / EMPLOYEE_ID */

--QUERY THAT WILL BE USED IN PL/SQL
SELECT
COALESCE(B.DEPARTMENT_ID,0) AS DEPARTMENT_ID
, COALESCE(B.NAME,'EXEC') AS DEPARTMENT_NAME
, COUNT(EMPLOYEE_ID) AS EMPS_PER_DEP
, SUM(SALARY) AS SUMSAL_PER_DEP
, CURRENT_TIMESTAMP AS LAST_LOAD_TS
FROM EMPLOYEE A
LEFT OUTER JOIN DEPARTMENT B
ON A.DEPARTMENT_ID = B.DEPARTMENT_ID
GROUP BY B.DEPARTMENT_ID, B.NAME;

--CREATING TARGET TABLE WITH ABOVE QUERY STRUCTURE
CREATE TABLE DEPT_DETAIL
( DEPARTMENT_ID NUMBER NOT NULL
, DEPARTMENT_NAME VARCHAR(20) NOT NULL
, EMPS_PER_DEP NUMBER
, SUMSAL_PER_DEP NUMBER
, LAST_LOAD_TS TIMESTAMP NOT NULL
, CONSTRAINT DEPT_DETAIL_PK PRIMARY KEY (DEPARTMENT_ID));


SET SERVEROUTPUT ON
/*
TRUNCATE TABLE DEPT_DETAIL;

DELETE FROM DEPT_DETAIL
WHERE DEPARTMENT_ID = 10;
COMMIT;

SELECT * FROM DEPT_DETAIL;
*/


SET SERVEROUTPUT ON
/*
TRUNCATE TABLE DEPT_DETAIL;

DELETE FROM DEPT_DETAIL
WHERE DEPARTMENT_ID = 10;
COMMIT;

SELECT * FROM DEPT_DETAIL;
*/








SET SERVEROUTPUT ON
/*
--VALIDATION QUERIES
TRUNCATE TABLE DEPT_DETAIL;

DELETE FROM DEPT_DETAIL
WHERE DEPARTMENT_ID = 10;
COMMIT;

SELECT * FROM DEPT_DETAIL;

SELECT * FROM EMPLOYEE;

SELECT * FROM DEPARTMENT;

INSERT INTO DEPARTMENT
(DEPARTMENT_ID, NAME, LOCATION)
VALUES(40,'SALES','NEW YORK')
INSERT INTO EMPLOYEE 
(EMPLOYEE_ID, FIRST_NAME, LAST_NAME, HIRE_DATE, SALARY, MANAGER, DEPARTMENT_ID)
VALUES(2121,'GAYATHRI','KUPUSWAMY','05-MAY-2000',111000,NULL,40);
*/


DECLARE     
    --DECLARATION OF FLAG VARIABLES
    INS_FLAG CHAR(1);
    UPD_FLAG CHAR(1);
    
    --DECLARATION OF CURSOR FOR CHECKING IF RECORDS EXIST IN TARGET TABLE
    CURSOR C1 IS 
        SELECT
        A.DEPARTMENT_ID  AS SRC_DEPT_ID
        , B.DEPARTMENT_ID AS TGT_DEPT_ID
        , STANDARD_HASH(B.DEPARTMENT_ID||'~'||B.DEPARTMENT_NAME||'~'||B.EMPS_PER_DEP||'~'||B.SUMSAL_PER_DEP, 'MD5') AS SRC_HASH --GENERATING SOURCE HASH KEY
        , STANDARD_HASH(A.DEPARTMENT_ID||'~'||A.DEPARTMENT_NAME||'~'||A.EMPS_PER_DEP||'~'||A.SUMSAL_PER_DEP, 'MD5') AS TGT_HASH --GENERATING TARGET HASH KEY
        FROM (SELECT
                 COALESCE(B.DEPARTMENT_ID,0) AS DEPARTMENT_ID
                 , COALESCE(B.NAME,'EXEC') AS DEPARTMENT_NAME
                 , COUNT(EMPLOYEE_ID) AS EMPS_PER_DEP
                 , SUM(SALARY) AS SUMSAL_PER_DEP
                 , CURRENT_TIMESTAMP AS LAST_LOAD_TS
                 FROM EMPLOYEE A
                 LEFT OUTER JOIN DEPARTMENT B
                 ON A.DEPARTMENT_ID = B.DEPARTMENT_ID
                 GROUP BY B.DEPARTMENT_ID, B.NAME) A 
        LEFT OUTER JOIN DEPT_DETAIL B
        ON A.DEPARTMENT_ID = b.department_id;
    
    --DECLARING A VARIABLE TO STORE THE ROWS RETURNED BY THE CURSOR
    V_ROW1 C1%ROWTYPE; 	  
    
BEGIN
    --OPENING CURSOR C1. THIS CURSOR WILL BE USED TO DETERMINE THE INSERT FLAG OR THE UPDATE FLAG   
    OPEN C1;
    
    --LOOPING THROUGH THE RECORDS RETURNED BY THE CURSOR C1
    LOOP 
        FETCH C1 INTO V_ROW1;
        EXIT WHEN C1%NOTFOUND;	--LOOP EXIT CONDITION
        
	-- SETTING THE INSERT FLAG/UPDATE FLAG TO DECIDE IF IT WILL BE AN INSERT OR AN UPDATE.
        IF V_ROW1.TGT_DEPT_ID IS NULL 
            THEN INS_FLAG := 'T';	--T FOR TRUE
            DBMS_OUTPUT.PUT_LINE('INSERT_FLAG ' ||INS_FLAG||' SOURCE DEPARTMENT ID IS V_ROW1.SRC_DEPT_ID '|| V_ROW1.TGT_DEPT_ID);	--OUTPUT MESSAGE FOR USER TO FOLLOW PRG EXECUTION

        ELSIF V_ROW1.TGT_DEPT_ID IS NOT NULL AND V_ROW1.SRC_HASH <> V_ROW1.TGT_HASH 
            THEN UPD_FLAG := 'T'; 
            DBMS_OUTPUT.PUT_LINE('UPDATE FLAG ' ||UPD_FLAG||' TARGET DEPARTMENT ID IS V_ROW1.TGT_DEPT_ID '|| V_ROW1.TGT_DEPT_ID);	--OUTPUT MESSAGE FOR USER TO FOLLOW PRG EXECUTION

        ELSE 
            DBMS_OUTPUT.PUT_LINE('NO UPDATE OR INSERT REQUIRED'||' TARGET DEPARTMENT ID IS V_ROW1.TGT_DEPT_ID '|| V_ROW1.TGT_DEPT_ID);	--OUTPUT MESSAGE FOR USER TO FOLLOW PRG EXECUTION
        END IF;
    END LOOP;
    CLOSE C1;
    
    --IF CONDITION TO ROUTE TO INSERT OP
    IF INS_FLAG = 'T' THEN
        MERGE INTO DEPT_DETAIL TGT
        USING
            (SELECT
            COALESCE(B.DEPARTMENT_ID,0) AS DEPARTMENT_ID
            , COALESCE(B.NAME,'EXEC') AS DEPARTMENT_NAME
            , COUNT(EMPLOYEE_ID) AS EMPS_PER_DEP
            , SUM(SALARY) AS SUMSAL_PER_DEP
            , CURRENT_TIMESTAMP AS LAST_LOAD_TS
            FROM EMPLOYEE A
            LEFT OUTER JOIN DEPARTMENT B
            ON A.DEPARTMENT_ID = B.DEPARTMENT_ID
            GROUP BY B.DEPARTMENT_ID, B.NAME) SRC
        ON (TGT.DEPARTMENT_ID =   SRC.DEPARTMENT_ID)
        WHEN NOT MATCHED THEN
        INSERT (TGT.DEPARTMENT_ID, TGT.DEPARTMENT_NAME, TGT.EMPS_PER_DEP, TGT.SUMSAL_PER_DEP, TGT.LAST_LOAD_TS)
        VALUES (SRC.DEPARTMENT_ID, SRC.DEPARTMENT_NAME, SRC.EMPS_PER_DEP, SRC.SUMSAL_PER_DEP, CURRENT_TIMESTAMP);
    
    --ELSIF CONDITION TO ROUTE TO UPDATE OP 
    ELSIF UPD_FLAG = 'T' THEN
        --UPDATE STATEMENT FOR UPDATING INTO TARGET TABLE
        MERGE INTO DEPT_DETAIL TGT
        USING (SELECT
                 COALESCE(B.DEPARTMENT_ID,0) AS DEPARTMENT_ID
                 , COALESCE(B.NAME,'EXEC') AS DEPARTMENT_NAME
                 , COUNT(EMPLOYEE_ID) AS EMPS_PER_DEP
                 , SUM(SALARY) AS SUMSAL_PER_DEP
                 , CURRENT_TIMESTAMP AS LAST_LOAD_TS
                 FROM EMPLOYEE A
                 LEFT OUTER JOIN DEPARTMENT B
                 ON A.DEPARTMENT_ID = B.DEPARTMENT_ID
                 GROUP BY B.DEPARTMENT_ID, B.NAME) SRC
        ON (TGT.DEPARTMENT_ID = SRC.DEPARTMENT_ID)
        WHEN MATCHED THEN
        UPDATE SET
             TGT.DEPARTMENT_NAME = SRC.DEPARTMENT_NAME
            , TGT.EMPS_PER_DEP = SRC.EMPS_PER_DEP
            , TGT.SUMSAL_PER_DEP = SRC.SUMSAL_PER_DEP
            , TGT.LAST_LOAD_TS = CURRENT_TIMESTAMP;                             
    END IF;  

END;
    

