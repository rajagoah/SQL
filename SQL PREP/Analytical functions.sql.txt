--DIPLAYING THE CUMULATIVE SUM OF THE SALARY WITH FIRS NAME AND THE LAST NAME

SELECT FIRST_NAME, LAST_NAME,SALARY, SUM(SALARY) OVER (ORDER BY LAST_NAME, FIRST_NAME NULLS LAST) FROM EMPLOYEE;

--CUMULATIVE SALARY TOTAL BY DEPARTMENT
SELECT FIRST_NAME, LAST_NAME, SALARY, DEPARTMENT_ID, SUM(SALARY) OVER (ORDER BY DEPARTMENT_ID) FROM EMPLOYEE;

--CUMULATIVE SALARY TOTAL BY DEPARTMENT BUT COMPUTED ON EACH ROW BASED ON SALARY VALUE
SELECT LAST_NAME, FIRST_NAME, SALARY, DEPARTMENT_ID, SUM(SALARY) OVER (PARTITION BY DEPARTMENT_ID ORDER BY SALARY ASC) FROM EMPLOYEE;

--USING THE SAME QUERY ABOVE AND SORTING THE MAIN QUERY ON A DIFFERENT ORDER
SELECT LAST_NAME, FIRST_NAME, SALARY, DEPARTMENT_ID, SUM(SALARY) OVER(PARTITION BY DEPARTMENT_ID ORDER BY SALARY ASC) FROM EMPLOYEE
ORDER BY DEPARTMENT_ID, LAST_NAME, FIRST_NAME;

--USING THE ROWS 2 PRECEEDING PARAMETER WINDOWING
SELECT LAST_NAME, FIRST_NAME, SALARY, DEPARTMENT_ID
, SUM(SALARY) OVER(PARTITION BY DEPARTMENT_ID ORDER BY DEPARTMENT_ID, SALARY ROWS 2 PRECEDING) AS DEPT_TOTAL FROM
EMPLOYEE ORDER BY DEPARTMENT_ID;

--Sort a partition by date of hire and use a RANGE windowing clause
SELECT LAST_NAME, FIRST_NAME, SALARY, DEPARTMENT_ID, HIRE_DATE
, MAX(SALARY) OVER(PARTITION BY DEPARTMENT_ID ORDER BY HIRE_DATE RANGE 90 PRECEDING) AS DEPT_TOTAL FROM EMPLOYEE;

--Query with a RANGE windowing clause that uses the BETWEEN and FOLLOWING parameters
SELECT LAST_NAME, FIRST_NAME, SALARY, DEPARTMENT_ID
, MAX(SALARY) OVER(PARTITION BY DEPARTMENT_ID ORDER BY HIRE_DATE RANGE BETWEEN 365 PRECEDING AND 365 FOLLOWING) AS DEPT_TOTAL
FROM EMPLOYEE;

--Code Listing 1: List employees, ranked by department, by salary
SELECT DENSE_RANK() OVER(PARTITION BY DEPARTMENT_ID ORDER BY SALARY DESC)AS RANK
, LAST_NAME, FIRST_NAME, SALARY, DEPARTMENT_ID
FROM EMPLOYEE;

--Code Listing 2: List employees, ranked by department, by salary WITH NULLS LAST PARAMETER
SELECT DENSE_RANK() OVER(PARTITION BY DEPARTMENT_ID ORDER BY SALARY DESC NULLS LAST)AS RANK
, LAST_NAME, FIRST_NAME, SALARY, DEPARTMENT_ID
FROM EMPLOYEE;

--Code Listing 3: List employees, ranked by department, by salary WITH NULLS LAST PARAMETER. uSING RaNK()
SELECT * FROM (
SELECT DENSE_RANK() OVER(PARTITION BY DEPARTMENT_ID ORDER BY SALARY DESC NULLS LAST)AS RANK
, LAST_NAME, FIRST_NAME, SALARY, DEPARTMENT_ID
FROM EMPLOYEE)A
WHERE A.RANK = 1;

--Display the first value returned per window, using FIRST_VALUE
SELECT LAST_NAME, FIRST_NAME, SALARY, DEPARTMENT_ID,
FIRST_VALUE(SALARY) OVER(PARTITION BY DEPARTMENT_ID ORDER BY HIRE_DATE)AS FIRST_SALARY
FROM EMPLOYEE;

--THE ABOVE OPERATION CAN BE ACHIEVED USING THE ROW_NUMBER OR THE RANK FUNCTION
SELECT * FROM(
SELECT ROW_NUMBER() OVER(PARTITION BY DEPARTMENT_ID ORDER BY HIRE_DATE)AS RN
,LAST_NAME, FIRST_NAME, DEPARTMENT_ID, SALARY, HIRE_DATE 
FROM EMPLOYEE)A WHERE A.RN=1;

--WHAT IS THE FIRST HIRE_DATE PER DEPARTMENT
SELECT DEPARTMENT_ID, MIN(HIRE_DATE) FROM EMPLOYEE
GROUP BY department_id ORDER BY DEPARTMENT_ID ;

--DISPLAY THE NAME, SALARY, DEPARTMENT, HIRE_DATE OF EMPLOYEE ALONGG WITH THEHIRE DATE OF THE FIRST EMPLOYEE IN THE DEPARTMENT
SELECT LAST_NAME, FIRST_NAME, SALARY, DEPARTMENT_ID, HIRE_DATE
, FIRST_VALUE(HIRE_DATE) OVER(PARTITION BY DEPARTMENT_ID ORDER BY HIRE_DATE) AS DATE_OF_FIRST_HIRE
, FIRST_VALUE(SALARY) OVER(PARTITION BY DEPARTMENT_ID ORDER BY HIRE_DATE) AS SALARY_OF_FIRST_HIRE
, LAST_VALUE(SALARY) OVER(PARTITION BY DEPARTMENT_ID ORDER BY HIRE_DATE RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS SALARY_OF_LAST_HIRE
FROM EMPLOYEE;


*************************************** PRACTICE CODE... PLEASE REFER THE /Users/aakarsh.rajagopalan/Personal documents/Analytical functions.sql DOCUMENT FOR QUESTIONS 

--GETTING THE ORDERS DATASET TO GIVE THE OUTPUT OF PRODUCT THAT MADE THE MAXIMUM SALE ON BOTH THE DAYS
SELECT 
  Y.ORDER_DAY, 
  X.PRODUCT_ID, 
  X.SOLD_AMOUNT 
FROM 
  (
    SELECT 
      ORDER_DAY, 
      MAX(SOLD_AMOUNT) AS SOLD_AMOUNT 
    FROM 
      (
        SELECT 
          ORDER_DAY, 
          PRODUCT_ID, 
          (QUANTITY * PRICE) AS SOLD_AMOUNT 
        FROM 
          ORDERS
      ) A 
    GROUP BY 
      ORDER_DAY
  ) Y 
  LEFT OUTER JOIN (
    SELECT 
      ORDER_DAY, 
      PRODUCT_ID, 
      (QUANTITY * PRICE) AS SOLD_AMOUNT 
    FROM 
      ORDERS
  ) X ON X.ORDER_DAY = Y.ORDER_DAY 
  AND X.SOLD_AMOUNT = Y.SOLD_AMOUNT;



SELECT Y.ORDER_DAY, X.PRODUCT_ID, X.SOLD_AMOUNT
FROM
(SELECT ORDER_DAY
, MAX(SOLD_AMOUNT) AS SOLD_AMOUNT
FROM(
SELECT ORDER_DAY, PRODUCT_ID
, (QUANTITY*PRICE) AS SOLD_AMOUNT
FROM ORDERS)A
GROUP BY ORDER_DAY)Y

LEFT OUTER JOIN
(
SELECT ORDER_DAY, PRODUCT_ID
, (QUANTITY*PRICE) AS SOLD_AMOUNT
FROM ORDERS)X
ON X.ORDER_DAY = Y.ORDER_DAY
AND X.SOLD_AMOUNT = Y.SOLD_AMOUNT;

SELECT PRODUCT_ID, QUANTITY*PRICE AS SOLD_AMOUNT
FROM ORDERS
WHERE ORDER_DAY=TO_DATE('2011-07-02','YYYY-MM-DD')
ORDER BY 2 DESC;

SELECT PRODUCT_ID, QUANTITY*PRICE AS SOLD_AMOUNT, QUANTITY
FROM ORDERS
WHERE ORDER_DAY = TO_DATE('2011-07-02','YYYY-MM-DD')
ORDER BY 2 DESC;

SELECT DISTINCT A.PRODUCT_ID
, COALESCE(X.SOLD_AMOUNT,0) AS "TOTAL_SALE-01"
, COALESCE(Y.SOLD_AMOUNT,0) AS "TOTAL_SALE-02"
FROM ORDERS A
LEFT OUTER JOIN 
(SELECT PRODUCT_ID ,B.QUANTITY*B.PRICE AS SOLD_AMOUNT
FROM ORDERS B 
WHERE B.ORDER_DAY = TO_DATE('2011-07-01','YYYY-MM-DD'))X

ON A.PRODUCT_ID = X.PRODUCT_ID

LEFT OUTER JOIN
(SELECT PRODUCT_ID, C.QUANTITY*C.PRICE AS SOLD_AMOUNT
FROM ORDERS C
WHERE C.ORDER_DAY = TO_DATE('2011-07-02','YYYY-MM-DD'))Y

ON A.PRODUCT_ID = Y.PRODUCT_ID
ORDER BY A.PRODUCT_ID;

--USING LISTAGG TO GET THE COLUMNS TO CONVERT TO ROW
SELECT DEPARTMENT_ID, LISTAGG(FIRST_NAME||' '||LAST_NAME, ', ') WITHIN GROUP 
(ORDER BY FIRST_NAME||' '||LAST_NAME)
FROM EMPLOYEE
GROUP BY DEPARTMENT_ID;

--USING THE PIVOT TABLE FUNCTION TO DISPLAY DATA IN CROSS TABULAR FORMAT
SELECT * FROM
            (SELECT DEPARTMENT_ID, SALARY FROM EMPLOYEE)
            PIVOT (SUM(SALARY) FOR DEPARTMENT_ID IN (10 AS Accounting
                                                    , 20 AS Payroll
                                                    , 30 AS IT
                                                    , null AS UNASSIGNED));
                                                    
SELECT DEPARTMENT_ID, SALARY FROM EMPLOYEE
            PIVOT (SUM(SALARY) FOR DEPARTMENT_ID IN (10 AS Accounting
                                                    , 20 AS Payroll
                                                    , 30 AS IT
                                                    , null AS UNASSIGNED));

---------------

CREATE TABLE ORDERS_2
(
ORDER_ID VARCHAR2(3)
, ITEM VARCHAR2(3)
, QNT INTEGER);

INSERT INTO ORDERS_2
VALUES('O1','A1',5);
INSERT INTO ORDERS_2
VALUES('O2','A2',1);
INSERT INTO ORDERS_2
VALUES('O3','A3',3);

---------------
select Order_Id, Item, 1
from ORDERS
expand on period (current_date, current_date + Qty) as pd;